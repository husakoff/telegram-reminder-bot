
import os
import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ users.json
try:
    with open("users.json", "r") as f:
        users = json.load(f)
except FileNotFoundError:
    users = []

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users():
    with open("users.json", "w") as f:
        json.dump(users, f)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users.append(user_id)
        save_users()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 ‚òÄÔ∏è")

@dp.callback_query_handler(lambda c: c.data == "viewed")
async def confirm_viewed(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–°–ø–∞—Å–∏–±–æ! –¢—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä ‚úÖ")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
async def send_reminders():
    for user_id in users:
        try:
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª ‚úÖ", callback_data="viewed")
            )
            await bot.send_message(user_id, "–ü—Ä–æ–≤–µ—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ EasyWeek üëÄ", reply_markup=keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
scheduler.add_job(send_reminders, "cron", hour=9, minute=0)
scheduler.start()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
